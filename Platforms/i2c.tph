'**************************************************************************************************
'       I2C object
'**************************************************************************************************

#define I2C_AVAILABLE 1

object i2c

enum i2c_ack_nack
	ACK=0, '<b>PLATFORM CONSTANT. </b><br><br> Acknowledge bit.
	NACK=1
end enum 

enum i2c_state
	I2C_STARTED=0, 
	I2C_IDLE=1,
	I2C_STRETCHING_ERROR=2,
	I2C_ARBITRATION_ERROR=3
end enum

property i2c.num
'Sets/returns the number of the currently selected I²C channel (channels are enumerated from 0).
    get = syscall(878) as byte
    set = syscall(879) (value as byte)
end property



property !i2c.baudrate
'syscall not used maybe should be timeout? 
	get = syscall(880) as byte
	set = syscall(881) (value as byte)
end property



property i2c.sdamap
'Sets/returns the number of the I/O line that will act as the SDA line of the currently selected I²C channel (selection is made through i2c.channel).
    get = syscall(882) as pl_io_num
    set = syscall(883) (value as pl_io_num)
end property


property i2c.sclmap
'Sets/returns the number of the I/O line that will act as the SCL line of the currently selected I²C channel (selection is made through i2c.channel).
    get = syscall(884) as pl_io_num
    set = syscall(885) (value as pl_io_num)
end property



'--------------------------------------------------------------------
property i2c.enabled
'Enables/disables the currently selected I²C channel (selection is made through ssi.channel).
    get = syscall(886) as no_yes
    set = syscall(887) (value as no_yes)
end property

syscall(888) i2c.start
'Sends the START signal on the currently selected I²C channel (selection is made through i2c.channel).

syscall(889) i2c.stop
'Sends the STOP signal on the currently selected I²C channel (selection is made through i2c.channel).

syscall(890) i2c.write(b as byte) as I2C_ACK_NACK
'Writes one byte to the currently selected I²C channel (selection is made through i2c.channel).
'Returns: An acknowledgment bit (enum i2c_ack_nack):
'0  — ACK: The data byte was received successfully.
'1 — NACK: The data byte was not received successfully.


syscall(891) i2c.read(nack as I2C_ACK_NACK) as byte
'Reads one byte from the currently selected I²C channel (selection is made through i2c.channel).
'This acknowledge bit to send to the target I²C peripheral after reading 8 bits of data(enum i2c_ack_nack):
'0 — ACK
'1 — NACK

property i2c.state
'Returns the state of the currently selected I²C channel (selection is made through i2c.channel).
	    get = syscall(892) as I2C_STATE
end property
